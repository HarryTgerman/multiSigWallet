{"version":3,"sources":["api/web3.ts","Hooks/useAsync.tsx","contexts/Web3.tsx","api/multi-sig-wallet.ts","contexts/MultiSigWallet.tsx","App/components/TransactionModal/index.tsx","App/components/ChangeOwnerModal/index.tsx","App/components/MultiSigWallet/index.tsx","App/components/Network.tsx","App/components/TransactionList/TransactionActions.tsx","App/components/TransactionList/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["unlockAccount","a","window","ethereum","Error","web3","Web3","enable","eth","getAccounts","accounts","account","useAsync","req","useState","pending","error","data","state","setState","params","call","INITIAL_STATE","netId","reducer","action","type","Web3Context","createContext","updateAccount","_data","updateNetId","useWeb3Context","useContext","Provider","children","useReducer","dispatch","value","useMemo","Updater","useEffect","callback","id","setInterval","clearInterval","subscribeToAccount","console","undefined","location","reload","net","getId","subscribeToNetId","MultiSigWallet","TruffleContract","multiSigWalletTruffle","get","setProvider","currentProvider","deployed","multiSig","getBalance","address","balance","getOwners","owners","getOwnerData","ownerData","numConfirmationsRequired","getTransactionCount","transactionCount","count","toNumber","transactions","i","txIndex","getTransaction","tx","isConfirmed","push","to","executed","numConfirmations","isConfirmedByCurrentAccount","sendTransaction","from","submitTx","submitTransaction","changeOwner","changeLastOwner","utils","asciiToHex","confirmTx","confirmTransaction","revokeConfirmation","executeTx","executeTransaction","parseInt","toBN","map","updatedTx","confirmed","owner","MultiSigWalletContext","set","updateBalance","addTx","updateTx","useMultiSigWalletContext","getMultiSigWallet","log","res","Contract","abi","events","allEvents","unsubscribe","subscribe","event","returnValues","TxModal","visible","onClose","inputs","setInputs","onChange","name","e","target","toString","title","onOk","confirmLoading","onCancel","okText","message","layout","Item","label","min","ChangeOwnerModal","transformedInput","toWei","deposit","openChangeOwner","open","openModal","input","setInput","setVisible","setConfirmLoading","handleOk","zero","gt","Title","level","gutter","span","fromWei","precision","itemLayout","header","footer","onClick","style","marginLeft","dataSource","renderItem","item","index","Meta","Text","description","isHex","hexToAscii","Network","getNetwork","TransactionActions","_e","disabled","loading","TransactionList","columns","dataIndex","key","render","bool","color","_","size","marginTop","Header","Layout","Footer","Content","Typography","App","className","theme","mode","textAlign","icon","UserOutlined","padding","href","GithubOutlined","onClickConnect","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4aa46203.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\n// https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md\nexport async function unlockAccount() {\n  // @ts-ignore\n  const { ethereum } = window;\n\n  if (!ethereum) {\n    throw new Error(\"Web3 not found\");\n  }\n\n  const web3 = new Web3(ethereum);\n  await ethereum.enable();\n\n  const accounts = await web3.eth.getAccounts();\n\n  return { web3, account: accounts[0] || \"\" };\n}\n\nexport function subscribeToAccount(\n  web3: Web3,\n  callback: (error: Error | null, account: string | null) => any\n) {\n  const id = setInterval(async () => {\n    try {\n      const accounts = await web3.eth.getAccounts();\n      callback(null, accounts[0]);\n    } catch (error) {\n      callback(error, null);\n    }\n  }, 1000);\n\n  return () => {\n    clearInterval(id);\n  };\n}\n\nexport function subscribeToNetId(\n  web3: Web3,\n  callback: (error: Error | null, netId: number | null) => any\n) {\n  const id = setInterval(async () => {\n    try {\n      const netId = await web3.eth.net.getId();\n      callback(null, netId);\n    } catch (error) {\n      callback(error, null);\n    }\n  }, 1000);\n\n  return () => {\n    clearInterval(id);\n  };\n}\n","import { useState } from \"react\";\n\ninterface State<Response> {\n  pending: boolean;\n  error: Error | null;\n  data: Response | null;\n}\n\ninterface CallResponse<Response> {\n  data?: Response;\n  error?: Error;\n}\n\ninterface UseAsync<Params, Response> extends State<Response> {\n  call: (params: Params) => Promise<CallResponse<Response>>;\n}\n\nfunction useAsync<Params, Response>(\n  req: (params: Params) => Promise<Response>\n): UseAsync<Params, Response> {\n  const [state, setState] = useState<State<Response>>({\n    pending: false,\n    error: null,\n    data: null,\n  });\n\n  async function call(params: Params): Promise<CallResponse<Response>> {\n    setState((state) => ({\n      ...state,\n      pending: true,\n      data: null,\n      error: null,\n    }));\n\n    try {\n      const data = await req(params);\n\n      setState((state) => ({\n        ...state,\n        pending: false,\n        data,\n      }));\n\n      return { data };\n    } catch (error) {\n      setState((state) => ({\n        ...state,\n        pending: false,\n        error,\n      }));\n\n      return { error };\n    }\n  }\n\n  return {\n    ...state,\n    call,\n  };\n}\n\nexport default useAsync;\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { subscribeToAccount, subscribeToNetId } from \"../api/web3\";\n\ninterface State {\n  account: string;\n  web3: Web3 | null;\n  netId: number;\n}\n\nconst INITIAL_STATE: State = {\n  account: \"\",\n  web3: null,\n  netId: 0,\n};\n\nconst UPDATE_ACCOUNT = \"UPDATE_ACCOUNT\";\nconst UPDATE_NET_ID = \"UPDATE_NET_ID\";\n\ninterface UpdateAccount {\n  type: \"UPDATE_ACCOUNT\";\n  account: string;\n  web3?: Web3;\n}\n\ninterface UpdateNetId {\n  type: \"UPDATE_NET_ID\";\n  netId: number;\n}\n\ntype Action = UpdateAccount | UpdateNetId;\n\nfunction reducer(state: State = INITIAL_STATE, action: Action) {\n  switch (action.type) {\n    case UPDATE_ACCOUNT: {\n      const web3 = action.web3 || state.web3;\n      const { account } = action;\n\n      return {\n        ...state,\n        web3,\n        account,\n      };\n    }\n    case UPDATE_NET_ID: {\n      const { netId } = action;\n\n      return {\n        ...state,\n        netId,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst Web3Context = createContext({\n  state: INITIAL_STATE,\n  updateAccount: (_data: { account: string; web3?: Web3 }) => {},\n  updateNetId: (_data: { netId: number }) => {},\n});\n\nexport function useWeb3Context() {\n  return useContext(Web3Context);\n}\n\ninterface ProviderProps {}\n\nexport const Provider: React.FC<ProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  function updateAccount(data: { account: string; web3?: Web3 }) {\n    dispatch({\n      type: UPDATE_ACCOUNT,\n      ...data,\n    });\n  }\n\n  function updateNetId(data: { netId: number }) {\n    dispatch({\n      type: UPDATE_NET_ID,\n      ...data,\n    });\n  }\n\n  return (\n    <Web3Context.Provider\n      value={useMemo(\n        () => ({\n          state,\n          updateAccount,\n          updateNetId,\n        }),\n        [state]\n      )}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};\n\nexport function Updater() {\n  const { state, updateNetId } = useWeb3Context();\n\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToAccount(state.web3, (error, account) => {\n        if (error) {\n          console.error(error);\n        }\n        if (account !== undefined && account !== state.account) {\n          window.location.reload();\n        }\n      });\n\n      return unsubscribe;\n    }\n  }, [state.web3, state.account]);\n\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToNetId(state.web3, (error, netId) => {\n        if (error) {\n          console.error(error);\n        }\n        if (netId) {\n          if (state.netId === 0) {\n            updateNetId({ netId });\n          } else if (netId !== state.netId) {\n            window.location.reload();\n          }\n        }\n      });\n\n      return unsubscribe;\n    }\n  }, [state.web3, state.netId, updateNetId]);\n\n  return null;\n}\n","import Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport TruffleContract from \"@truffle/contract\";\nimport multiSigWalletTruffle from \"../build/contracts/MultiSigWallet.json\";\n\n// @ts-ignore\nconst MultiSigWallet = TruffleContract(multiSigWalletTruffle);\n\ninterface Transaction {\n  txIndex: number;\n  to: string;\n  value: BN;\n  data: string;\n  executed: boolean;\n  numConfirmations: number;\n  isConfirmedByCurrentAccount: boolean;\n}\n\ninterface GetResponse {\n  address: string;\n  balance: string;\n  owners: string[];\n  ownerData: string[];\n  numConfirmationsRequired: number;\n  transactionCount: number;\n  transactions: Transaction[];\n}\n\nexport async function get(web3: Web3, account: string): Promise<GetResponse> {\n  MultiSigWallet.setProvider(web3.currentProvider);\n\n  const multiSig = await MultiSigWallet.deployed();\n\n  const balance = await web3.eth.getBalance(multiSig.address);\n  const owners = await multiSig.getOwners();\n  const ownerData = await multiSig.getOwnerData();\n  const numConfirmationsRequired = await multiSig.numConfirmationsRequired();\n  const transactionCount = await multiSig.getTransactionCount();\n\n  // get 10 most recent tx\n  const count = transactionCount.toNumber();\n  const transactions: Transaction[] = [];\n  for (let i = 1; i <= 10; i++) {\n    const txIndex = count - i;\n    if (txIndex < 0) {\n      break;\n    }\n\n    const tx = await multiSig.getTransaction(txIndex);\n    const isConfirmed = await multiSig.isConfirmed(txIndex, account);\n\n    transactions.push({\n      txIndex,\n      to: tx.to,\n      value: tx.value,\n      data: tx.data,\n      executed: tx.executed,\n      numConfirmations: tx.numConfirmations.toNumber(),\n      isConfirmedByCurrentAccount: isConfirmed,\n    });\n  }\n\n  return {\n    address: multiSig.address,\n    balance,\n    owners,\n    ownerData,\n    numConfirmationsRequired: numConfirmationsRequired.toNumber(),\n    transactionCount: count,\n    transactions,\n  };\n}\n\nexport async function deposit(\n  web3: Web3,\n  account: string,\n  params: {\n    value: BN;\n  }\n) {\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.sendTransaction({ from: account, value: params.value });\n}\n\nexport async function submitTx(\n  web3: Web3,\n  account: string,\n  params: {\n    to: string;\n    // NOTE: error when passing BN type, so pass string\n    value: string;\n    data: string;\n  }\n) {\n  const { to, value, data } = params;\n\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.submitTransaction(to, value, data, {\n    from: account,\n  });\n}\n\nexport async function changeOwner(\n  web3: Web3,\n  account: string,\n  params: {\n    // NOTE: error when passing BN type, so pass string\n    value: BN;\n    data: string;\n  }\n) {\n  const { value, data } = params;\n\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.changeLastOwner(Web3.utils.asciiToHex(data), { from: account, value: params.value });\n}\n\nexport async function confirmTx(\n  web3: Web3,\n  account: string,\n  params: {\n    txIndex: number;\n  }\n) {\n  const { txIndex } = params;\n\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.confirmTransaction(txIndex, {\n    from: account,\n  });\n}\n\nexport async function revokeConfirmation(\n  web3: Web3,\n  account: string,\n  params: {\n    txIndex: number;\n  }\n) {\n  const { txIndex } = params;\n\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.revokeConfirmation(txIndex, {\n    from: account,\n  });\n}\n\nexport async function executeTx(\n  web3: Web3,\n  account: string,\n  params: {\n    txIndex: number;\n  }\n) {\n\n  const { txIndex } = params;\n\n  MultiSigWallet.setProvider(web3.currentProvider);\n  const multiSig = await MultiSigWallet.deployed();\n\n  await multiSig.executeTransaction(txIndex, {\n    from: account,\n  });\n}\n\nexport function subscribe(\n  web3: Web3,\n  address: string,\n  callback: (error: Error | null, log: Log | null) => void\n) {\n  const multiSig = new web3.eth.Contract(MultiSigWallet.abi, address);\n\n  const res = multiSig.events.allEvents((error: Error, log: Log) => {\n    if (error) {\n      callback(error, null);\n    } else if (log) {\n      callback(null, log);\n    }\n  });\n\n  return () => res.unsubscribe();\n}\n\ninterface Deposit {\n  event: \"Deposit\";\n  returnValues: {\n    sender: string;\n    amount: string;\n    balance: string;\n  };\n}\n\ninterface SubmitTransaction {\n  event: \"SubmitTransaction\";\n  returnValues: {\n    owner: string;\n    txIndex: string;\n    to: string;\n    value: string;\n    data: string;\n  };\n}\n\ninterface ConfirmTransaction {\n  event: \"ConfirmTransaction\";\n  returnValues: {\n    owner: string;\n    txIndex: string;\n  };\n}\n\ninterface RevokeConfirmation {\n  event: \"RevokeConfirmation\";\n  returnValues: {\n    owner: string;\n    txIndex: string;\n  };\n}\n\ninterface ExecuteTransaction {\n  event: \"ExecuteTransaction\";\n  returnValues: {\n    owner: string;\n    txIndex: string;\n  };\n}\n\ntype Log =\n  | Deposit\n  | SubmitTransaction\n  | ConfirmTransaction\n  | RevokeConfirmation\n  | ExecuteTransaction;","import Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport React, {\n  useReducer,\n  useEffect,\n  createContext,\n  useContext,\n  useMemo,\n} from \"react\";\nimport { useWeb3Context } from \"./Web3\";\nimport { get as getMultiSigWallet, subscribe } from \"../api/multi-sig-wallet\";\n\ninterface State {\n  address: string;\n  balance: string;\n  owners: string[];\n  ownerData: string[];\n  numConfirmationsRequired: number;\n  transactionCount: number;\n  transactions: Transaction[];\n}\n\ninterface Transaction {\n  txIndex: number;\n  to: string;\n  value: BN;\n  data: string;\n  executed: boolean;\n  numConfirmations: number;\n  isConfirmedByCurrentAccount: boolean;\n}\n\nconst INITIAL_STATE: State = {\n  address: \"\",\n  balance: \"0\",\n  owners: [],\n  ownerData: [],\n  numConfirmationsRequired: 0,\n  transactionCount: 0,\n  transactions: [],\n};\n\nconst SET = \"SET\";\nconst UPDATE_BALANCE = \"UPDATE_BALANCE\";\nconst ADD_TX = \"ADD_TX\";\nconst UPDATE_TX = \"UPDATE_TX\";\n\ninterface Set {\n  type: \"SET\";\n  data: {\n    address: string;\n    balance: string;\n    owners: string[];\n    numConfirmationsRequired: number;\n    transactionCount: number;\n    transactions: Transaction[];\n  };\n}\n\ninterface UpdateBalance {\n  type: \"UPDATE_BALANCE\";\n  data: {\n    balance: string;\n  };\n}\n\ninterface AddTx {\n  type: \"ADD_TX\";\n  data: {\n    txIndex: string;\n    to: string;\n    value: string;\n    data: string;\n  };\n}\n\ninterface UpdateTx {\n  type: \"UPDATE_TX\";\n  data: {\n    account: string;\n    txIndex: string;\n    owner: string;\n    executed?: boolean;\n    confirmed?: boolean;\n  };\n}\n\ntype Action = Set | UpdateBalance | AddTx | UpdateTx;\n\nfunction reducer(state: State = INITIAL_STATE, action: Action) {\n  switch (action.type) {\n    case SET: {\n      return {\n        ...state,\n        ...action.data,\n      };\n    }\n    case UPDATE_BALANCE: {\n      return {\n        ...state,\n        balance: action.data.balance,\n      };\n    }\n    case ADD_TX: {\n      const {\n        data: { txIndex, to, value, data },\n      } = action;\n\n      const transactions = [\n        {\n          txIndex: parseInt(txIndex),\n          to,\n          value: Web3.utils.toBN(value),\n          data,\n          executed: false,\n          numConfirmations: 0,\n          isConfirmedByCurrentAccount: false,\n        },\n        ...state.transactions,\n      ];\n\n      return {\n        ...state,\n        transactionCount: state.transactionCount + 1,\n        transactions,\n      };\n    }\n    case UPDATE_TX: {\n      const { data } = action;\n\n      const txIndex = parseInt(data.txIndex);\n\n      const transactions = state.transactions.map((tx) => {\n        if (tx.txIndex === txIndex) {\n          const updatedTx = {\n            ...tx,\n          };\n\n          if (data.executed) {\n            updatedTx.executed = true;\n          }\n          if (data.confirmed !== undefined) {\n            if (data.confirmed) {\n              updatedTx.numConfirmations += 1;\n              updatedTx.isConfirmedByCurrentAccount =\n                data.owner === data.account;\n            } else {\n              updatedTx.numConfirmations -= 1;\n              if (data.owner === data.account) {\n                updatedTx.isConfirmedByCurrentAccount = false;\n              }\n            }\n          }\n\n          return updatedTx;\n        }\n        return tx;\n      });\n\n      return {\n        ...state,\n        transactions,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\ninterface SetInputs {\n  address: string;\n  balance: string;\n  owners: string[];\n  numConfirmationsRequired: number;\n  transactionCount: number;\n  transactions: Transaction[];\n}\n\ninterface UpdateBalanceInputs {\n  balance: string;\n}\n\ninterface AddTxInputs {\n  txIndex: string;\n  to: string;\n  value: string;\n  data: string;\n}\n\ninterface UpdateTxInputs {\n  account: string;\n  txIndex: string;\n  owner: string;\n  confirmed?: boolean;\n  executed?: boolean;\n}\n\nconst MultiSigWalletContext = createContext({\n  state: INITIAL_STATE,\n  set: (_data: SetInputs) => { },\n  updateBalance: (_data: UpdateBalanceInputs) => { },\n  addTx: (_data: AddTxInputs) => { },\n  updateTx: (_data: UpdateTxInputs) => { },\n});\n\nexport function useMultiSigWalletContext() {\n  return useContext(MultiSigWalletContext);\n}\n\ninterface ProviderProps { }\n\nexport const Provider: React.FC<ProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  function set(data: SetInputs) {\n    dispatch({\n      type: SET,\n      data,\n    });\n  }\n\n  function updateBalance(data: UpdateBalanceInputs) {\n    dispatch({\n      type: UPDATE_BALANCE,\n      data,\n    });\n  }\n\n  function addTx(data: AddTxInputs) {\n    dispatch({\n      type: ADD_TX,\n      data,\n    });\n  }\n\n  function updateTx(data: UpdateTxInputs) {\n    dispatch({\n      type: UPDATE_TX,\n      data,\n    });\n  }\n\n  return (\n    <MultiSigWalletContext.Provider\n      value={useMemo(\n        () => ({\n          state,\n          set,\n          updateBalance,\n          addTx,\n          updateTx,\n        }),\n        [state]\n      )}\n    >\n      {children}\n    </MultiSigWalletContext.Provider>\n  );\n};\n\nexport function Updater() {\n  const {\n    state: { web3, account },\n  } = useWeb3Context();\n  const {\n    state,\n    set,\n    updateBalance,\n    addTx,\n    updateTx,\n  } = useMultiSigWalletContext();\n\n  useEffect(() => {\n    async function get(web3: Web3, account: string) {\n      try {\n        const data = await getMultiSigWallet(web3, account);\n        console.log(\"set data\", data)\n        set(data);\n      } catch (error) {\n        console.log(\"error\")\n\n        console.error(error);\n      }\n    }\n\n    if (web3) {\n      console.log(\"try get data\")\n      get(web3, account);\n    }\n  }, [web3]);\n\n  useEffect(() => {\n    if (web3 && state.address) {\n      return subscribe(web3, state.address, (error, log) => {\n        if (error) {\n          console.error(error);\n        } else if (log) {\n          switch (log.event) {\n            case \"Deposit\":\n              updateBalance(log.returnValues);\n              break;\n            case \"SubmitTransaction\":\n              addTx(log.returnValues);\n              break;\n            case \"ConfirmTransaction\":\n              updateTx({\n                ...log.returnValues,\n                confirmed: true,\n                account,\n              });\n              break;\n            case \"RevokeConfirmation\":\n              updateTx({\n                ...log.returnValues,\n                confirmed: false,\n                account,\n              });\n              break;\n            case \"ExecuteTransaction\":\n              updateTx({\n                ...log.returnValues,\n                executed: true,\n                account,\n              });\n              break;\n            default:\n              console.log(log);\n          }\n        }\n      });\n    }\n  }, [web3, state.address]);\n  return null;\n}\n","import React, { useState } from \"react\";\nimport { Modal, Form, Input, Alert } from \"antd\";\nimport useAsync from \"../../../Hooks/useAsync\";\nimport { useWeb3Context } from \"../../../contexts/Web3\";\nimport { submitTx } from \"../../../api/multi-sig-wallet\";\nimport { visible } from \"ansi-colors\";\n\ninterface Props {\n    visible: boolean;\n    onClose: (event?: any) => void;\n}\n\ninterface SubmitTxParams {\n    to: string;\n    value: string;\n    data: string;\n}\n\nconst TxModal: React.FC<Props> = ({ visible, onClose }) => {\n    const {\n        state: { web3, account },\n    } = useWeb3Context();\n\n    const { pending, error, call } = useAsync<SubmitTxParams, any>(\n        async (params) => {\n            if (!web3) {\n                throw new Error(\"No web3\");\n            }\n\n            await submitTx(web3, account, params);\n        }\n    );\n\n    const [inputs, setInputs] = useState({\n        to: \"\",\n        value: 0,\n        data: \"\",\n    });\n\n    function onChange(name: string, e: React.ChangeEvent<HTMLInputElement>) {\n        setInputs({\n            ...inputs,\n            [name]: e.target.value,\n        });\n    }\n\n    async function onSubmit() {\n        if (pending) {\n            return;\n        }\n\n        const { error } = await call({\n            ...inputs,\n            value: inputs.value.toString(),\n        });\n\n        if (!error) {\n            onClose();\n        }\n    }\n\n    return (\n        <Modal\n            title=\"Create Transaction ?\"\n            visible={visible}\n            onOk={onSubmit}\n            confirmLoading={pending}\n            onCancel={onClose}\n            okText=\"Create\"\n        >\n            {error && <Alert message={error.message} type=\"error\" />}\n            <Form layout=\"vertical\">\n                <Form.Item label=\"To\">\n                    <Input\n                        type=\"text\"\n                        value={inputs.to}\n                        onChange={(e) => onChange(\"to\", e)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Value\">\n                    <Input\n                        type=\"number\"\n                        min={0}\n                        value={inputs.value}\n                        onChange={(e) => onChange(\"value\", e)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"Data in HEX\">\n                    <Input\n                        value={inputs.data}\n                        onChange={(e) => onChange(\"data\", e)}\n                    />\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default TxModal;","import React, { useState } from \"react\";\nimport { message, Modal, Form, Input, Alert } from \"antd\";\nimport useAsync from \"../../../Hooks/useAsync\";\nimport { useWeb3Context } from \"../../../contexts/Web3\";\nimport { changeOwner } from \"../../../api/multi-sig-wallet\";\nimport Web3 from \"web3\";\nimport BN from \"bn.js\";\n\ninterface Props {\n    visible: boolean;\n    onClose: (event?: any) => void;\n}\n\n\ninterface SubmitChangeOwnerParams {\n    value: BN,\n    data: string\n}\n\n\nconst ChangeOwnerModal: React.FC<Props> = ({ visible, onClose }) => {\n    const {\n        state: { web3, account },\n    } = useWeb3Context();\n\n    const { pending, error, call } = useAsync<SubmitChangeOwnerParams, any>(\n        async (params) => {\n            if (!web3) {\n                throw new Error(\"No web3\");\n            }\n\n            await changeOwner(web3, account, params);\n        }\n    );\n\n    const [inputs, setInputs] = useState({\n        value: 0,\n        data: \"\",\n    });\n\n    function onChange(name: string, e: React.ChangeEvent<HTMLInputElement>) {\n        setInputs({\n            ...inputs,\n            [name]: e.target.value,\n        });\n    }\n\n    async function onSubmit() {\n        if (inputs.value < 4) {\n            return message.error(\"Send at least 4 ETH to become owner\")\n        }\n        if (pending) {\n            return;\n        }\n\n        const transformedInput = Web3.utils.toWei(`${inputs.value}`, \"ether\")\n        const value = Web3.utils.toBN(transformedInput);\n        const { error } = await call({\n            value: value,\n            data: inputs.data\n        });\n\n        if (error) {\n            message.error(error.message);\n        } else {\n            setInputs({\n                value: 0,\n                data: \"\",\n            });\n            onClose();\n        }\n\n    }\n\n    return (\n        <Modal\n            title=\"Become owner\"\n            visible={visible}\n            onOk={onSubmit}\n            confirmLoading={pending}\n            onCancel={onClose}\n            okText=\"Become Owner\"\n        >\n            {error && <Alert message={error.message} type=\"error\" />}\n            <Form layout=\"vertical\">\n                <Form.Item label=\"Pay more than 4 Ether to replace last Owner\">\n                    <Input\n                        type=\"number\"\n                        min={4}\n                        value={inputs.value}\n                        onChange={(e) => onChange(\"value\", e)}\n                    />\n                </Form.Item>\n                <Form.Item label=\"State something about you\">\n                    <Input\n                        value={inputs.data}\n                        onChange={(e) => onChange(\"data\", e)}\n                    />\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default ChangeOwnerModal;","import React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport BN from \"bn.js\";\nimport { Button, List, Typography, Statistic, Row, Col, Modal, InputNumber, message } from \"antd\";\nimport { deposit } from \"../../../api/multi-sig-wallet\";\nimport { useMultiSigWalletContext } from \"../../../contexts/MultiSigWallet\";\nimport { useWeb3Context } from \"../../../contexts/Web3\";\nimport useAsync from \"../../../Hooks/useAsync\";\nimport TxModal from \"../TransactionModal\";\nimport ChangeOwnerModal from \"../ChangeOwnerModal\";\n\n// import DepositForm from \"./DepositForm\";\n// import CreateTxModal from \"./CreateTxModal\";\n// import TransactionList from \"./TransactionList\";\n\n\ninterface Props { }\n\ninterface DepositParams {\n    web3: Web3;\n    account: string;\n    value: BN;\n}\n\n\nexport default function MultiSigWallet() {\n    const {\n        state: { web3, account },\n    } = useWeb3Context();\n    const { state } = useMultiSigWalletContext();\n\n    const { pending, call } = useAsync<DepositParams, void>(\n        ({ web3, account, value }) => deposit(web3, account, { value })\n    );\n\n    const [changeOwner, openChangeOwner] = useState(false);\n    const [open, openModal] = useState(false);\n    const [input, setInput] = useState(\"\");\n    const [visible, setVisible] = useState(false);\n    const [confirmLoading, setConfirmLoading] = useState(false);\n\n    const showModal = () => {\n        setVisible(true);\n    };\n\n    const handleOk = async () => {\n        setConfirmLoading(true);\n\n        if (pending) {\n            return;\n        }\n\n        if (!web3) {\n            message.error(\"No web3\");\n            return;\n        }\n\n        const transformedInput = web3.utils.toWei(`${input}`, \"ether\")\n        const value = Web3.utils.toBN(transformedInput);\n        const zero = Web3.utils.toBN(0);\n\n        if (value.gt(zero)) {\n            const { error } = await call({\n                web3,\n                account,\n                value,\n            });\n\n            if (error) {\n                message.error(error.message);\n            } else {\n                setInput(\"\");\n                setConfirmLoading(false);\n                setVisible(false)\n            }\n        }\n\n    };\n\n    const handleCancel = () => {\n        setVisible(false);\n    };\n\n\n    return (\n        <div>\n            <Typography.Title level={3}>Contract: {state.address}</Typography.Title>\n            <Row gutter={16}>\n                <Col span={8}>\n                    <Statistic title=\"Balance Ether\" value={web3?.utils.fromWei(state.balance, \"ether\")} precision={2} />\n                </Col>\n                <Col span={8}>\n                    <Statistic title=\"Confirmations required\" value={state.numConfirmationsRequired} />\n                </Col>\n                <Col span={8}>\n                    <Statistic title=\"Transactions\" value={state.transactionCount} />\n                </Col>\n            </Row>\n            <List\n                itemLayout=\"horizontal\"\n                header={<Typography.Title level={3}>Owners</Typography.Title>}\n                footer={<div>\n                    <Button type=\"primary\" onClick={showModal}>Deposit Ether</Button>\n                    <Button style={{ marginLeft: \"8px\" }} type=\"primary\" onClick={() => openModal(true)}>Create Transaction</Button>\n                    <Button style={{ marginLeft: \"8px\" }} type=\"primary\" onClick={() => openChangeOwner(true)}>Become Owner</Button>\n                </div>}\n\n                dataSource={state.owners}\n                renderItem={(item, index) => (\n                    <List.Item>\n                        <List.Item.Meta\n                            title={item === account ? <Typography.Text type=\"success\" >{item}</Typography.Text> : item}\n                            description={Web3.utils.isHex(state.ownerData[index]) ? Web3.utils.hexToAscii(state.ownerData[index]) : \"NOT HEX\"}\n                        />\n                    </List.Item>\n                )}\n            />\n            <Modal\n                title=\"How much Ether do you want to deposit ?\"\n                visible={visible}\n                onOk={handleOk}\n                confirmLoading={confirmLoading}\n                onCancel={handleCancel}\n                okText=\"Deposit\"\n            >\n                <InputNumber value={input} onChange={setInput} />\n            </Modal>\n            <TxModal visible={open} onClose={() => openModal(false)} />\n            <ChangeOwnerModal visible={changeOwner} onClose={() => openChangeOwner(false)} />\n        </div>\n    );\n}\n","import React from \"react\";\n\ninterface Props {\n    netId: number;\n}\n\nfunction getNetwork(netId: number) {\n    switch (netId) {\n        case 1:\n            return \"Mainnet\";\n        case 2:\n            return \"Morden test network\";\n        case 3:\n            return \"Ropsten network\";\n        case 4:\n            return \"Rinkeby test network\";\n        case 42:\n            return \"Kovan test network\";\n        default:\n            return \"Unkown network\";\n    }\n}\n\nconst Network: React.FC<Props> = ({ netId }) => {\n    return <div>{getNetwork(netId)}</div>;\n};\n\nexport default Network;","import React from \"react\";\nimport { Button } from \"antd\";\nimport { useWeb3Context } from \"../../../contexts/Web3\";\nimport useAsync from \"../../../Hooks/useAsync\";\nimport * as multiSig from \"../../../api/multi-sig-wallet\";\n\ninterface Props {\n    numConfirmationsRequired: number;\n    tx: {\n        txIndex: number;\n        executed: boolean;\n        numConfirmations: number;\n        isConfirmedByCurrentAccount: boolean;\n    };\n}\n\nconst TransactionActions: React.FC<Props> = ({\n    numConfirmationsRequired,\n    tx,\n}) => {\n    const {\n        state: { web3, account },\n    } = useWeb3Context();\n\n    const { txIndex } = tx;\n\n    const confirmTx = useAsync(async () => {\n        if (!web3) {\n            throw new Error(\"No web3\");\n        }\n\n        await multiSig.confirmTx(web3, account, { txIndex });\n    });\n\n    const revokeConfirmation = useAsync(async () => {\n        if (!web3) {\n            throw new Error(\"No web3\");\n        }\n\n        await multiSig.revokeConfirmation(web3, account, { txIndex });\n    });\n\n    const executeTx = useAsync(async () => {\n        if (!web3) {\n            throw new Error(\"No web3\");\n        }\n\n        await multiSig.executeTx(web3, account, { txIndex });\n    });\n\n    if (tx.executed) {\n        return null;\n    }\n    return (\n        <>\n            {tx.isConfirmedByCurrentAccount ? (\n                <Button\n                    onClick={(_e) => revokeConfirmation.call(null)}\n                    disabled={revokeConfirmation.pending}\n                    loading={revokeConfirmation.pending}\n                >\n                    Revoke Confirmation\n                </Button>\n            ) : (\n                <Button\n                    onClick={(_e) => confirmTx.call(null)}\n                    disabled={confirmTx.pending}\n                    loading={confirmTx.pending}\n                >\n                    Confirm\n                </Button>\n            )}\n            {tx.numConfirmations >= numConfirmationsRequired && (\n                <Button\n                    onClick={(_e) => executeTx.call(null)}\n                    disabled={executeTx.pending}\n                    loading={executeTx.pending}\n                >\n                    Execute\n                </Button>\n            )}\n        </>\n    );\n};\n\nexport default TransactionActions;","import React from \"react\";\nimport BN from \"bn.js\";\nimport TransactionActions from \"./TransactionActions\";\nimport { useMultiSigWalletContext } from \"../../../contexts/MultiSigWallet\";\nimport { Table, Tag, Space } from \"antd\";\n\ninterface Transaction {\n    txIndex: number;\n    to: string;\n    value: BN;\n    data: string;\n    executed: boolean;\n    numConfirmations: number;\n    isConfirmedByCurrentAccount: boolean;\n}\n\ninterface Props {\n    numConfirmationsRequired: number;\n    count: number;\n    data: Transaction[];\n}\n\n\n\nconst TransactionList = () => {\n    const { state } = useMultiSigWalletContext();\n\n\n    const columns = [\n        {\n            title: 'Transaction Index',\n            dataIndex: 'txIndex',\n            key: 'txIndex',\n        },\n        {\n            title: 'To',\n            dataIndex: 'to',\n            key: 'to',\n        },\n        {\n            title: 'Value',\n            dataIndex: 'value',\n            key: 'Value',\n            render: (value: string) => value.toString()\n        },\n        {\n            title: 'Data',\n            dataIndex: 'data',\n            key: 'data',\n            render: (data: string) => <div >{data}</div>\n        },\n        {\n            title: 'Executed',\n            key: 'executed',\n            dataIndex: 'executed',\n            render: (bool: boolean) => bool ? <Tag color=\"green\" >True</Tag> : <Tag color=\"loser\">False</Tag>\n        },\n        {\n            title: 'Confirmations',\n            key: 'numConfirmations',\n            dataIndex: 'numConfirmations',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (_: any, tx: Transaction) => (\n                <Space size=\"middle\">\n                    <TransactionActions\n                        numConfirmationsRequired={state.numConfirmationsRequired}\n                        tx={tx}\n                    />\n                </Space>\n            ),\n        },\n    ];\n\n    return (<Table style={{ marginTop: \"100px\" }} columns={columns} dataSource={state.transactions} />);\n};\n\nexport default TransactionList;","import React from \"react\";\nimport { unlockAccount } from \"../api/web3\";\nimport useAsync from \"../Hooks/useAsync\";\nimport 'antd/dist/antd.css';\nimport \"./index.css\"\nimport { useWeb3Context } from \"../contexts/Web3\";\nimport MultiSigWallet from \"./components/MultiSigWallet\";\nimport Network from \"./components/Network\";\nimport { Layout, Avatar, Menu, Button, Typography, List, message } from 'antd';\nimport { GithubOutlined, UserOutlined } from '@ant-design/icons';\nimport TransactionList from \"./components/TransactionList\";\n\n\nconst { Header, Footer, Content } = Layout;\nconst { Title } = Typography;\n\nfunction App() {\n  const {\n    state: { account, netId },\n    updateAccount,\n  } = useWeb3Context();\n\n  const { pending, error, call } = useAsync(unlockAccount);\n\n  async function onClickConnect() {\n    const { error, data } = await call(null);\n\n    if (error) {\n      console.error(error);\n      message.error(error)\n    }\n    if (data) {\n      updateAccount(data);\n    }\n  }\n\n\n  if (!account) {\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <Menu mode=\"horizontal\" style={{ textAlign: \"right\" }}  >\n            <Menu.Item > <Button onClick={() => onClickConnect()}\n              disabled={pending}\n              loading={pending}>Authenticate</Button> </Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div className=\"site-layout-content\">\n            <Title level={2}>Please connect your Metamask</Title>\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Coded By Harry Trippel <a target=\"_blank\" href=\"https://github.com/harrytgerman/\"> <GithubOutlined /> </a></Footer>\n      </Layout>\n    );\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <Layout className=\"layout\">\n        <Header>\n          <Menu theme=\"dark\" mode=\"horizontal\" style={{ textAlign: \"right\" }}  >\n            <Menu.Item  ><Avatar size={32} icon={<UserOutlined />} /> {account}</Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div className=\"site-layout-content\">\n            <Title>Multi Signature Wallet</Title>\n            {netId !== 0 && <Network netId={netId} />}\n            <MultiSigWallet />\n            <TransactionList />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Coded By Harry Trippel <a target=\"_blank\" href=\"https://github.com/HarryTgerman/multiSigWallet\"> <GithubOutlined /> </a></Footer>\n      </Layout>,\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {\n  Provider as Web3Provider,\n  Updater as Web3Updater,\n} from \"./contexts/Web3\";\nimport {\n  Provider as MultiSigWalletProvider,\n  Updater as MultiSigWalletUpdater,\n} from \"./contexts/MultiSigWallet\";\nimport \"./index.css\";\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <MultiSigWalletProvider>\n        <App />\n        <Web3Updater />\n        <MultiSigWalletUpdater />\n      </MultiSigWalletProvider>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}